// 创建一个版本库
$ mkdir learngit

// 进入某个版本库
$ cd learngit

// 显示当前目录
$ pwd

//将当前目录变成git管理的仓库
$ git init

// 添加一个文件到仓库
$ git add learngit.txt

// 提交文件(可以一次提交多个文件) -m 参数后面输入的是本次提交的说明
$ git commit -m "add 3 files."

// 命令可以让我们时刻掌握仓库当前的状态, 要随时掌握工作区的状态，使用git status命令。
$ git status

// 顾名思义就是查看difference，显示的格式正是Unix通用的diff格式, 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git diff learngit.txt 

// 命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log

// 用来记录你的每一次命令 (当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id)
$ git reflog

// Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
$ git reset --hard HEAD^
$ git reset --hard 1094a(版本号, 可以只写前几位)

//用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
$ git reset HEAD learngit.txt

//把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	(git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令)
$ git checkout -- learngit.txt 

// 文件就从版本库中被删除(其实还在缓存区, 可以用git reset HEAD <file>还原到工作区, 再用git checkout -- file撤销删除)
$ git rm test.txt

// 把一个已有的本地仓库与之关联
$ git remote add origin https://github.com/qiyutian1992/learngit.git

// 把本地库的所有内容推送到远程库
$ git push -u origin master

//克隆一个本地库
$ git clone git@github.com:qiyutian1992/gitskills.git

//分支: 
	// 查看分支：
	$ git branch

	// 创建分支：
	$ git branch <name>

	//切换分支：
	$ git checkout <name>

	//创建+切换分支：
	$ git checkout -b <name>

	//合并某分支到当前分支：
	$ git merge <name>

	//删除分支：
	$ git branch -d <name>

//查看分支合并情况
$ git log --graph --pretty=oneline --abbrev-commit