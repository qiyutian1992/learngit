Scala
	数据类型 Scala类的继承层级
									<trait>								<trait>
									Nothing							 	Null
									/     \                          	/   \
								   /       \                           /     \
								  Any    所有类型的子类型               /     所有引用类型的子类型
								   |                                  /
				--------------------------------------------------   /
				|                                                |  /
			   <trait>											AnyRef
			   Anyval									<trait>    |
			  	|									  ScalaObject  |
		 ----------------------------------------			   \   |
		 |    |    |    |    |    |    |    |    |			----------------
	 Boolean  |   Byte  |   Char  |  Double |  Float		|			   |
	 		  |         |         |         |			  Scala          Java
	 		 Int       Long      Short     Unit			 classes		classes

	变量定义
		val|var 变量名 : 变量类型 = 值	
	注意 
		1)数据的类型可以指定也可以不指定，不指定的时候，编译器会自己去推断数据类型；
		2)Var修饰的变量是可以重新赋值的，而val修饰的变量不能够重新赋值(相当于java中final关键字修饰的变量)；
		3)在以后的编程过程中，能够使用val的地方的绝不使用var

	条件表达式 if else
		如果没有一个分支成立, 编译器会默认格尼加上返回值"()",表示什么都没有
		在scala中最后一行代码就是返回值

	循环/yield 关键字
		To : 生成一个左闭右闭区间
		Until : 生成一个左闭右开区间
		yield : 返回一个新的集合 根据yield关键字后边的变量	
	注意
		1)代码风格和java不太一样  <-
		2)for循环里面可以增加守卫if
		3)yield可以返回一个新的数组，总之返回类型和循环的数据类型一般是一致的
	示例 : for (elem <- arr if elem % 2 == 0) yield elem

	Scala中没有运算符, 只有方法

	方法定义
		使用 def 关键字
		方法的返回值不用写, 编译器会自动推导
	示例 : def 方法名(变量名 : 变量类型) : 返回值类型 = {方法体}
	任意类型的参数|可变参数 : def say(args:Any*) = args.size

	函数定义
		函数的参数列表 => 函数体(逻辑)
		(a : Int, b : Int) => a + b
		函数参数类型列表 => 函数的返回值 = ( 参数引用|名称 ) => 函数体
		val f2:(Int, Int) => Int = (x,y) => x + y
	在scala中方法可以转换成函数:
		可以用"空格_"
	示例: 
		def add() = "1"
		val f0 = add _
	注意:
		在scala语言中，函数头等公民，可用直接用一个变量来接收她；
		函数可以作为一个参数传递给一个方法；
